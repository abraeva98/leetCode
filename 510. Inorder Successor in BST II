Given a node in a binary search tree, return the in-order successor of that node in the BST. If that node has no in-order successor, return null.

The successor of a node is the node with the smallest key greater than node.val.

You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for Node:


//O(H) - time, means O(logN) in average, O(N) in the very worst
  O(1) - space

var inorderSuccessor = function(node) {
    /*
        we need to find out where node is located,
        1) if node has a right child than return right child's left
        most child
        2) if we don't have a right child compare if the parent is
        larger than us, if it is return it
        3) if it's not call recursion with the parent
    */
    if (node.right) {
        node = node.right;
        while (node.left !== null) {
            node = node.left;
        }
        return node;
    } else {
        while (node.parent && node.parent.val < node.val) {
            node = node.parent;
        }
        return node.parent;
    }
    return null;
};
