// O(M*N) - time, O(1) - space

var minPathSum = function(grid) {
    /*
        create a variable that will store the smallest num seen, 
        iterate the grid and calculate the smallest sum to get
        the current point by picking the least expensive way to
        get to current by comparing left and up neighbors,
        return the last el in the grid
    */
    for (let i = 0; i < grid.length; i ++) {
        for (let j = 0; j < grid[i].length; j ++) {
            if (i - 1 >= 0 && j - 1 >= 0) {
                grid[i][j] = Math.min(grid[i][j] + grid[i - 1][j], grid[i][j] + grid[i][j - 1])
            } else if (i - 1 >= 0 && j - 1 < 0) {
                grid[i][j] += grid[i - 1][j];
            } else if (j - 1 >= 0 && i - 1 < 0) {
                grid[i][j] += grid[i][j - 1];
            }
        }
    }
    return grid[grid.length - 1][grid[0].length - 1];
};
