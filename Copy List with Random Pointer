O(N) - time, space

var copyRandomList = function(head) {
    let hashMap = new Map();
    
    function makeCopy(node) {
        if (node === null) return null;
        if (hashMap.has(node)) {
            return hashMap.get(node);
        }
        let copyNode = new Node(node.val)
        hashMap.set(node, copyNode);
        
        copyNode.next = makeCopy(node.next);
        copyNode.random = makeCopy(node.random);
        
        return copyNode;
    }
    
    return makeCopy(head);
};

var copyRandomList = function(head) {
    /*
        1) create a hashMap where we will be storing
        each node, so we won't lose connection
        to pointers
        2) iterate through linked list again and fill in the 
        random and next pointer
        3) return node with key head
    */
    let node = head;
    let hashMap = new Map();
    
    while (node !== null) {
        hashMap.set(node, new Node(node.val));
        node = node.next;
    }
    
    node = head;
    while (node !== null) {
        hashMap.get(node).next = hashMap.get(node.next) || null;
        hashMap.get(node).random = hashMap.get(node.random) || null;
        node = node.next;
    }
    return hashMap.get(head);
};
