You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

var addTwoNumbers = function(l1, l2) {
  let sumList = new ListNode();
  let sum = sumList;
  let carrier = 0;

  while (l1 || l2) {
     let currSum = (l1 ? l1.val : 0) + (l2 ? l2.val : 0) + carrier;
     carrier = Math.floor(currSum / 10);
     sum.next = new ListNode(currSum % 10);
     sum = sum.next;
     if (l1) l1 = l1.next;
     if (l2) l2 = l2.next;
  }
  if (carrier > 0) sum.next = new ListNode(carrier);
  return sumList.next;
}





function ListNode(val) {
  this.val = val;
  this.next = null;
}

function addTwo(l1, l2) {
  let list = new ListNode(0);
  let currentNode = list;
  let sum = 0;
  let carry = 0;
  while (l1 || l2 || sum > 0) {
    if (l1) {
      sum += l1.val;
      l1 = l1.next;
    }
    if (l2) {
      sum += l2.val;
      l2 = l2.next;
    }
    carry = Math.floor(sum / 10)
    currentNode.next = new ListNode(sum % 10);
    currentNode = currentNode.next;
    sum = carry;
    carry = 0;
  }
  return list.next;
}
