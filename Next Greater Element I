// O(N+M) - time, space
var nextGreaterElement = function(nums1, nums2) {
    let res = new Array(nums1.length).fill(-1);
    let map = new Map();
    for (let i = 0; i < nums1.length; i ++) {
        map.set(nums1[i], i);
    }
    let idx = 0;
    let stack = [];
    for (let i = 0; i < nums2.length; i ++) {
        if (stack.length > 0 && nums2[stack[stack.length - 1]] < nums2[i]) {
            while (nums2[stack[stack.length - 1]] < nums2[i]) {
                let idx = stack.pop();
                if (map.has(nums2[idx])) {
                    let resIdx = map.get(nums2[idx]);
                    res[resIdx] = nums2[i];
                }
            }
        }
        stack.push(i);
    }
    return res;
};



var nextGreaterElement = function(nums1, nums2) {
    /*
        use a stack a hashMap, iterate through nums2
        and create stack with great elements, comapre to the last 
        el in the stack, if curr is greater than add last el as key
        and curr as val, add curr to the stack
    */
    let stack = [];
    let map = new Map();
    for (let i = 1; i < nums2.length; i ++) {
        while (stack.length > 0 && stack[stack.length - 1] < nums2[i]) {
            let key = stack.pop();
            map.set(key, nums2[i]);
        }
        stack.push(nums2[i]);
    }
    for (let i = 0; i < nums1.length; i ++) {
        if (!map.has(nums1[i])) nums1[i] = -1;
        else nums1[i] = map.get(nums1[i]);
    }
    return nums1;
};

// O(N*M) - time, O(M) - space

var nextGreaterElement = function(nums1, nums2) {
    /*
        create a hashmap with indexes of nums2,
        iterate through nums1 and check the position of
        the num in nums2, iterate starting from that position,
        if a greater num is found return it, otherwise return -1
    */
    let map = new Map();
    for (let i = 0; i < nums2.length; i ++) {
        map.set(nums2[i], i + 1);
    } 
    for (let i = 0; i < nums1.length; i ++) {
        let idx = map.get(nums1[i]);
        let greater = -1;
        while (idx < nums2.length) {
            if (nums2[idx] > nums1[i]) {
                greater = nums2[idx];
                break;
            } else {
                idx ++;
            }
        }
        nums1[i] = greater;
    }
    return nums1;
};
