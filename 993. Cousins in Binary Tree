In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.


var isCousins = function(root, x, y) {
    let nodeX = findNode(root, x, 0, '');
    let nodeY = findNode(root, y, 0, '');
    if (nodeY[0] !== nodeX[0] || nodeY[1] === nodeX[1]) return false;
    return true;
};

function findNode(root, node, depth, parent) {
    if (root === null) return 0;
    if (root.left && root.left.val === node) parent = root;
    if (root.right && root.right.val === node) parent = root;
    if (root.val === node) return [depth, parent];
    let leftSide = findNode(root.left, node, depth + 1, parent);
    if (leftSide) return leftSide
    else return findNode(root.right, node, depth + 1, parent)
}
