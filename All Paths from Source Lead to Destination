// O(V + E) - time, O(n) - space
Given the edges of a directed graph where edges[i] = [ai, bi] indicates there is an edge 
between nodes ai and bi, and two nodes source and destination of this graph, determine whether or not all paths starting from source eventually, end at destination, that is:

At least one path exists from the source node to the destination node
If a path exists from the source node to a node with no outgoing edges, then that node is equal to destination.
The number of possible paths from source to destination is a finite number.
Return true if and only if all roads from source lead to destination.

var leadsToDestination = function(n, edges, source, destination) {
    /*
        build a hashMap where I will be storing all sources and possible
        destionations in an array. I will traverse the each path
        and if it ends in some place other than destination than
        I will return, after traversing through the entire graph, 
        I will return true
        Use backtracking recursion to check all path
    */
    let hashMap = new Map();
    
    for (let [source, destination] of edges) {
        if (hashMap.has(source)) {
            hashMap.set(source, [...hashMap.get(source), destination]);
        } else {
            hashMap.set(source, [destination]);
        }
    }
    let visited = new Set();
    function backtrack(curr) {
        if (!hashMap.has(curr)) return curr === destination;
        visited.add(curr);
        let paths = hashMap.get(curr);
        for (let i = 0; i < paths.length; i ++) {
             if (visited.has(paths[i]) || !backtrack(paths[i])) return false;
        }
        visited.delete(curr)
        return true;
    }
    return backtrack(source);
};
