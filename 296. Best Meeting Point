Given an m x n binary grid grid where each 1 marks the home of one friend, return the minimal total travel distance.

The total travel distance is the sum of the distances between the houses of the friends and the meeting point.

The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.


Input: grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]
Output: 6
Explanation: Given three friends living at (0,0), (0,4), and (2,2).
The point (0,2) is an ideal meeting point, as the total travel distance of 2 + 2 + 2 = 6 is minimal.
So return 6.


// O(NMlogNM) - time
   O(NM) - space

var minTotalDistance = function(grid) {
    /*
        create two arrays and store rows and columns
        at which grid is equal to one,
        sort the rows/column, find the medium, iterate through both
        of them calculating the distance between curr and medium,
        add the distance of row and columns
    */
    let rows = [];
    let columns = [];
    for (let i = 0; i < grid.length; i ++) {
        for (let j = 0; j < grid[i].length; j ++) {
            if (grid[i][j] === 1) {
                rows.push(i);
                columns.push(j);
            }
        }
    }
    columns.sort((a, b) => a - b);
    let row = rows[Math.floor(rows.length / 2)];
    let column = columns[Math.floor(columns.length / 2)];
    return findDistance(columns, column) + findDistance(rows, row);
};

function findDistance(points, target) {
    let distance = 0;
    for (let point of points) {
        distance += Math.abs(target - point);
    }
    return distance;
}
