var missingElement = function(nums, k) {
    /*
        Binary search O(logN), we will take advantage from
        our array being sorted. We find the middle index and 
        check how many numbers are missing. If missing number is 
        greater than k, then we will move right pointer to the middle.
        Otherwise, we will more left pointer to the middle + 1.
    */
    let n = nums.length - 1;
    if (nums[n] - nums[0] - n < k) {
        return nums[n] + k - countMissing(n, nums)
    }
    let left = 0;
    let right = n;

    while (left < right) {
        let middle = Math.floor((right - left) / 2) + left;
        let missing = countMissing(middle, nums);
        if (missing < k) left = middle + 1;
        else right = middle;
    }
    return nums[left - 1] + k - countMissing(left - 1, nums);
};

function countMissing(left, nums) {
    return nums[left] - nums[0] - left;
}

// 2 solution O(N) - time, O(1) - space
var missingElement = function(nums, k) {
    /*
        We will need a counter variable which will be equal
        to the first number in nums. We will check if the next number
        in nums is equal to the counter + 1, if it is not we will
        increment the counter until they are equal or
        until we reached k
    */
    let counter = nums[0] + 1;
    let missingNum = 0;
    let index = 1;
    while (missingNum < k) {
        if (nums[index] !== counter) {
            missingNum ++;
            counter ++;
        } else {
            index ++;
            counter ++;
        }
    }
    return counter - 1;
};
