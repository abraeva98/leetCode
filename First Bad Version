var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n) {
        let left = 1, right = n;
        let map = new Map();
        while (left <= right) {
            let middle = Math.floor((right - left) / 2) + left;
            let isBad;
            if (map.has(middle)) {
                isBad = map.get(middle);
            } else {
                isBad = isBadVersion(middle);
                map.set(middle, isBad)
            }            

            if (isBad) {   
                let curr;
                if (map.has(middle - 1)) {
                    curr = map.get(middle - 1);
                } else {
                    curr = isBadVersion(middle - 1);
                }
                
                if (curr) {
                    right = middle - 1;
                } else {
                    return middle;
                }
            } else {
                left = middle + 1;
            }
        }
        
    };
};

var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n) {
        let left = 1, right = n;
        while (left < right) {
            let mid = Math.floor((right - left) / 2) + left;
            if (isBadVersion(mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    };
};
