// O(MÃ—N) - time, space, where M is the number of rows and N is the number of columns of the Board.

var gameOfLife = function(board) {
    /*
    1 - live, 0 - dead
    create a deep copy of the board and return in the end,
    check the bounderies 
        1) live - count how many live neighbors curr cell has, 
        if less than 2 or more than three, reassign to 0
        2) dead - count how live cell neighbors, if they are three,
        reassign to 1
    */
    let copyBoard = [];
    for (let i = 0; i < board.length; i ++) {
        let current = [];
        for (let j = 0; j < board[i].length; j ++) {
            current.push(board[i][j])
        }
        copyBoard.push(current);
    }

    for (let i = 0; i < copyBoard.length; i ++) {
        for (let j = 0; j < copyBoard[i].length; j ++) {
            let liveNeighborsCount = helper(i, j, copyBoard);
            if (copyBoard[i][j] === 0) {
                if (liveNeighborsCount === 3) board[i][j] = 1;
            } else {
                if (liveNeighborsCount < 2 || liveNeighborsCount > 3) board[i][j] = 0;
            }
        }
    }
    
};

function helper(i, j, board) {
        let count = 0;
        if (i < board.length - 1 && board[i + 1][j] === 1) count ++;
        if (i - 1 >= 0 && board[i - 1][j] === 1) count ++;
        if (j < board[0].length - 1 && board[i][j + 1] === 1) count ++;
        if (j - 1 >= 0 && board[i][j - 1] === 1) count ++;
        if (i < board.length - 1 && j - 1 >= 0 && board[i + 1][j - 1] === 1) count ++;
        if (i < board.length - 1 && j < board[0].length - 1 && board[i + 1][j + 1] === 1) count ++;
        if (i - 1 >= 0 && j - 1 >= 0 && board[i - 1][j - 1] === 1) count ++;
        if (i - 1 >= 0 && j < board[0].length - 1 && board[i - 1][j + 1] === 1) count ++;
        return count;
}
