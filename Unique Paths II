// O(M*N) - time, O(1) - space

var uniquePathsWithObstacles = function(obstacleGrid) {
    /*
        create dp grid same as input, [0, 0] will be 1
        iterate through dp if the grid and row and col
        is 1 than skip this row in dp,
        return the last el
    */
    let n = obstacleGrid.length;
    let m = obstacleGrid[0].length;
    let dp = new Array(n).fill(0).map(() => new Array(m).fill(0));
    
    for (let i = 0; i < n; i ++) {
        if (obstacleGrid[i][0] === 1) break;
        dp[i][0] = 1; 
    }
    
    for (let j = 0; j < m; j ++) {
        if (obstacleGrid[0][j] === 1) break;
        dp[0][j] = 1; 
    }
    
    for (let i = 1; i < n; i ++) {
        for (let j = 1; j < m; j ++) {
            if (obstacleGrid[i][j] === 1) continue;
            dp[i][j] = (dp[i - 1][j] || 0) + (dp[i][j - 1] || 0);
        }
    }
    return dp[n - 1][m - 1];
};
