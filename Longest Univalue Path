// O(N) - time, O(H) - space

var longestUnivaluePath = function(root) {
    if (!root) return root;
    if (!root.left && !root.right) return 0;
    let max = 0;
    function DFS(curr, node, counter) {
        if (node === null) return 0;
        if (curr !== node) return counter;
        let left, right;
        if (node.left && node.left.val === node.val) {
            left = DFS(node, node.left, counter + 1);
        } else if (node.right && node.right.val === node.val) {
            right = DFS(node, node.right, counter + 1);
        }
        let sum = left + right || 0;
        max = Math.max(sum, max);
        return sum;
    }
    DFS(root, root, 0);
    return max;
};
