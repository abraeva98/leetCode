var wordBreak = function(s, wordDict) {
    /*
        1) create a hashmap and store words of dict by first
        letter
        2) iterate though the given string and if we found
        start letter in hashmap, we will get all the words in it
        and try to create a sentance starting from each of them
        3) for example, if we got c: [cat, cats] -> we take cat
        and see if this is a substring of the string, if it is,
        call recursion on the rest of the string, now the first letter is
        s -> check if we have any words starting from s
        4) add the path to an array and if the str is empty add to res and rturn
    */
    let dict = new Map();
    for (let word of wordDict) {
        if (!dict.has(word[0])) dict.set(word[0], []);
        dict.get(word[0]).push(word);
    }
    
    let sentences = new Set();
    function recurse(sentence, string, visited) {
        // console.log(string)
        if (string === '') {
            sentences.add(sentence.join(' '));
            return;
        }
        for (let i = 0; i < string.length; i ++) {
            if (dict.has(string[i])) {
                let words = dict.get(string[i]);
                for (let word of words) {
                    // if (visited.has(word)) continue;
                    // visited.add(word);
                    let len = word.length;
                    let substring = string.substring(i, len);
                     console.log(substring, word)
                    if (substring === word && !visited.has(word)) {
                        // visited.add(word);
                         sentence.push(word);
                         recurse([...sentence], string.substring(len), visited);
                         sentence.pop();
                    }
                }
            }
        }
    }
    
    recurse([], s, new Set());
    return [...sentences];
};
