O(N) - time, space
var flatten = function(root) {
    /*
        DFS preorder traversal with stack (first in last out)
        traverse the tree and right child in the stack 
        and left will become a right child, we iterate through the stack
    */
    
    let prev = null;
    
    function helper(node) {
        if (node === null) return null;
        helper(node.right);
        helper(node.left);
        
        if (prev) {
            node.right = prev;
            node.left = null;
        }
        prev = node;
    }
    helper(root)
};

O(N) - time, space
var flatten = function(root) {
    /*
        DFS preorder traversal with stack (first in last out)
        traverse the tree and right child in the stack 
        and left will become a right child, we iterate through the stack
    */
    if (root === null) return [];
    if (root.left === null && root.right === null) return root;
    
    let stack = [root];
    let prev = new TreeNode(0);
    
    while (stack.length > 0) {
        let node = stack.pop();
        if (node.right) stack.push(node.right);
        if (node.left) stack.push(node.left);
        
        prev.right = node;
        prev.left = null;
        prev = node;
    }
    return root;
};
