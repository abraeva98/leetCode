// O(SP) - time, space

var isMatch = function(s, p) {
    /*
      if p is equal to '*' return true,
      if s and p are equal return true,
      dp approach - create a grid that will be the
      s * p, start filling up from 0 0 - empty string, return
      true, continue filling up the grid,
      if curr is equal to '*' check if grid[row][col - 1] || grid[row - 1][col]
      if curr is equal to '?' check if grid[row - 1][col - 1]
    */
    let grid = [];
    for (let i = 0; i < s.length + 1; i ++) {
        let arr = [];
        for (let j = 0; j < p.length + 1; j ++) {
            arr.push(false);
        }
        grid.push(arr);
    }
    grid[0][0] = true;
    for (let i = 0; i < p.length; i ++) {
        if (p[i] === '*') grid[0][i + 1] = grid[0][i];
    }
    // i is index at s, j is index at p
    for (let i = 1; i <= s.length; i ++) {
        for (let j = 1; j <= p.length; j ++) {
            if (p[j-1] === s[i-1] || p[j-1] === '?') {
                grid[i][j] = grid[i-1][j-1];
            } else if (p[j-1] === '*') {
                grid[i][j] = grid[i-1][j] || grid[i][j-1];
            } 
        }
    }
    return grid[s.length][p.length];
};
