// O(N^2) - time, O(N) - space

function findCircleNum(M) {
    /*
        create a visited set and add cities to it if don't have them in
        the set, check its neighbors and if we have it in the set, skip it,
        increment the counter whenever you encounter non-visited city
    */
    let set = new Set();
    let provinces = 0;
    for (let i = 0; i < M.length; i ++) {
        if (!set.has(i)) {
            provinces ++;
            DFS(i);
        }
    }
    
    function DFS(i) {
        for (let j = 0; j < M.length; j ++) {
            if (M[i][j] === 1 && !set.has(j)) {
                set.add(j);
                DFS(j);
            }
        }
    }
    
    return provinces;
}


function findCircleNum(M) {
    /*
        create a hashmap with all the connections of the city,
        iterate throught he elements in a hashamp and if we have 
        only one connection, we increment the count of provinces
        and we have more than one will be iterating through each of them
        and shifting the values, so we wouldn't check the same city twice
    */
    let map = new Map();
    for (let i = 0; i < M.length; i ++) {
        for (let j = 0; j < M[i].length; j ++) {
            if (M[i][j] === 1) {
                if (!map.has(i)) {
                    map.set(i, []);
                }
                if (i !== j) map.get(i).push(j);
            }
        }
    }
    let provinces = 0;
    
    function helper(city) {
        let neighbors = map.get(city);
        if (!neighbors) return;
        while (neighbors.length > 0) {
            let neighbor = neighbors.shift();
            helper(neighbor);
        }
        map.delete(city)
    }
    
    for (let [city, neighbors] of map) {
        if (neighbors.length === 0) {
            provinces ++;
        } else {
            provinces ++;
            helper(city);
        }
    }
    
    return provinces;
}
