// O(NlogN) - time, O(N) - time
We are given a list schedule of employees, which represents the working time for each employee.

Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order.

Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.

(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. 
For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined).  
Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.



var employeeFreeTime = function(schedule) {
    let merged = [];
    for (let employee of schedule) {
        for (let time of employee) {
            merged.push(time);
        }
    }
    merged.sort((a, b) => a.start - b.start);
    let overlapping = [];
    let last;
    for (let time of merged) {
        if (!last) {
            last = time.end;
        } else {
        if (last < time.start) {
            overlapping.push(new Interval(last, time.start));
        } 
        last = Math.max(last, time.end);
        }
    }
    return overlapping;
}
