Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

var decodeString = function(str) {
    /*
        I will use two stack to solve this problem, 
        the first one will contain of num and the second
        one of nums and letters inside the brackets,
        if the it is not a num of it is not inside the
        bracket add to result
    */
    let stack = [];

    for (let i = 0; i < str.length; i ++) {
        if (str[i] === ']') {
            let currStr = [];
            let currNum = [];
            while (stack[stack.length - 1] !== '[') {
                currStr.push(stack.pop());
            }
            stack.pop();
            while (stack[stack.length - 1] >= '0' && stack[stack.length - 1] <= '9') {
                currNum.unshift(stack.pop());
            }
            stack.push(currStr.reverse().join('').repeat(currNum.join('')));
        } else {
            stack.push(str[i]);
        }
    }
    
    return stack.join('');
}

const decodeString = function(str) {
  let currStr = '';
  let currNum = 0;
  let stack = [];
  for (const char of str) {
      if (char === "[") {
          stack.push(currStr);
          stack.push(currNum);
          currStr = '';
          currNum = 0;
      } else if (char === ']') {
          let num = stack.pop();
          let prev = stack.pop();
          currStr = prev + currStr.repeat(num);
      } else if (!isNaN(Number(char))) {
          currNum = currNum * 10 + Number(char);
      } else {
          currStr += char;
      }
  }
  return currStr;
};
